# Tests multiple Python versions in Linux and build in macOS
matrix:
  include:
    - os: linux
      dist: xenial
      sudo: false
      language: python
      python: 3.5
      env: PIPENV_SKIP_LOCK=True
    - os: linux
      dist: xenial
      sudo: false
      language: python
      python: 3.6
    - os: linux
      dist: xenial
      sudo: false
      language: python
      python: 3.7
    - os: linux
      dist: xenial
      sudo: false
      language: python
      python: 3.8
    # OS X 10.12 Sierra
    - os: osx
      osx_image: xcode8.3
      sudo: required
      language: generic
      env: PY_VER=3.6.3 PIPENV_SKIP_LOCK=True

before_install:
  # OS info
  - uname -a
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then sw_vers; fi
  # macOS needs python3 to be installed
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then pyenv install --list; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then CONFIGURE_OPTS=--enable-shared pyenv install $PY_VER; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then pyenv global $PY_VER; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then ln -s `pyenv which python` /usr/local/bin/python3 ; fi
  # Python info
  - python3 --version
  - python3 -c "import struct; print(struct.calcsize('P') * 8)"
  - python3 -c "import sys; print(sys.executable)"
  - python3 -m pip --version
  - python3 -m pip freeze

install:
  # Install and check installed packages
  - python3 -m pip install pipenv
  - python3 -m pipenv install --dev . --ignore-pipfile
  - python3 -m pipenv run python --version
  - python3 -m pipenv run pip freeze

  # Temporarily downgrade setuptools https://github.com/pyinstaller/pyinstaller/issues/4672
  - python3 -m pipenv run pip install setuptools==44.1.0

  # Build the two versions of ubittool in macOS using PyInstaller
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then python3 -m pipenv run python make.py build; fi

  # Collect the build outputs in macoOS
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then sudo -H mv dist artifacts; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then ls -l artifacts; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then sudo -H chmod +x ./artifacts/ubittool-cli; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then cd artifacts && sudo -H zip --symlinks -r ubittool-gui.zip ubittool-gui.app && cd ..; fi

  # Prepare codecov coverage
  - python3 -m pip install codecov

script:
  # Running the tests. Linux needs frame buffer, so run with "xvfb-run".
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then xvfb-run python3 -m pipenv run python make.py check; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then python3 -m pipenv run python make.py check; fi
  # Run cli app as a simple test to check uBitTool build is not broken
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then ./artifacts/ubittool-cli --help; fi

after_script:
  # Upload built executables to a temporary service
  # - if [ "$TRAVIS_OS_NAME" = "osx" ]; then curl --upload-file ./artifacts/ubittool-gui.zip https://transfer.sh/ubittool-gui.zip ; fi
  # - if [ "$TRAVIS_OS_NAME" = "osx" ]; then curl --upload-file ./artifacts/ubittool-cli https://transfer.sh/ubittool-cli ; fi
  # - curl -F "file=@./artifacts/ubittool-gui.zip" "https://file.io/?expires=3"
  # - curl -F "file=@./artifacts/ubittool-cli" "https://file.io/?expires=3"
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then curl https://github.com/timvisee/ffsend/releases/download/v0.2.44/ffsend-v0.2.44-macos -L -o ffsend; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then sudo -H chmod +x ./ffsend; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install openssl@1.1; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then ./ffsend upload ./artifacts/ubittool-gui.zip; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then ./ffsend upload ./artifacts/ubittool-cli; fi

  # Upload test coverage report
  - codecov

notifications:
  email:
    on_success: change
    on_failure: change
